
midterm-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002a8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000430  08000430  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000430  08000430  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000430  08000430  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000430  08000430  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000430  08000430  00010430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000434  08000434  00010434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000438  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f32  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000449  00000000  00000000  00020f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f8  00000000  00000000  000213b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001b0  00000000  00000000  000215a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001061  00000000  00000000  00021758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000196a  00000000  00000000  000227b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb611  00000000  00000000  00024123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000df734  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000610  00000000  00000000  000df784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000418 	.word	0x08000418

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000418 	.word	0x08000418

080001c8 <main>:
void turn_surname_off();
void delaytime1();
void delaytime2();
int main()

{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	int i ;
	    init_leds();
 80001ce:	f000 f821 	bl	8000214 <init_leds>
	    delaytime1();
 80001d2:	f000 f86b 	bl	80002ac <delaytime1>
	    for(i=0;i<4;i++){
 80001d6:	2300      	movs	r3, #0
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	e006      	b.n	80001ea <main+0x22>
	        turn_name_on();
 80001dc:	f000 f832 	bl	8000244 <turn_name_on>
	        turn_name_off();
 80001e0:	f000 f83c 	bl	800025c <turn_name_off>
	    for(i=0;i<4;i++){
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3301      	adds	r3, #1
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	2b03      	cmp	r3, #3
 80001ee:	ddf5      	ble.n	80001dc <main+0x14>
	    }
	    for(i=0;i<5;i++){
 80001f0:	2300      	movs	r3, #0
 80001f2:	607b      	str	r3, [r7, #4]
 80001f4:	e006      	b.n	8000204 <main+0x3c>
	            turn_surname_on();
 80001f6:	f000 f83d 	bl	8000274 <turn_surname_on>
	            turn_surname_off();
 80001fa:	f000 f849 	bl	8000290 <turn_surname_off>
	    for(i=0;i<5;i++){
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	3301      	adds	r3, #1
 8000202:	607b      	str	r3, [r7, #4]
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2b04      	cmp	r3, #4
 8000208:	ddf5      	ble.n	80001f6 <main+0x2e>
	        }

return 0;
 800020a:	2300      	movs	r3, #0
	    }
 800020c:	4618      	mov	r0, r3
 800020e:	3708      	adds	r7, #8
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}

08000214 <init_leds>:
void init_leds(){
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
	rccahblenR = gpiodmask;
 8000218:	4b08      	ldr	r3, [pc, #32]	; (800023c <init_leds+0x28>)
 800021a:	2208      	movs	r2, #8
 800021c:	601a      	str	r2, [r3, #0]
	gpiodModr=gpiodP14mask;  //14 ve 13 pinleri açıldı //
 800021e:	4b08      	ldr	r3, [pc, #32]	; (8000240 <init_leds+0x2c>)
 8000220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000224:	601a      	str	r2, [r3, #0]
	gpiodModr |=gpiodP13mask;
 8000226:	4b06      	ldr	r3, [pc, #24]	; (8000240 <init_leds+0x2c>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4a05      	ldr	r2, [pc, #20]	; (8000240 <init_leds+0x2c>)
 800022c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000230:	6013      	str	r3, [r2, #0]
}
 8000232:	bf00      	nop
 8000234:	46bd      	mov	sp, r7
 8000236:	bc80      	pop	{r7}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	40023830 	.word	0x40023830
 8000240:	40020c00 	.word	0x40020c00

08000244 <turn_name_on>:
void turn_name_on(){
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0

	gpiodOdr=gpiodp14onmask; //Kırmızı açıldı //
 8000248:	4b03      	ldr	r3, [pc, #12]	; (8000258 <turn_name_on+0x14>)
 800024a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800024e:	601a      	str	r2, [r3, #0]
	delaytime1();
 8000250:	f000 f82c 	bl	80002ac <delaytime1>
}
 8000254:	bf00      	nop
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40020c14 	.word	0x40020c14

0800025c <turn_name_off>:
void turn_name_off(){
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0

	gpiodOdr=gpiodp14ofmask; // Kırmızı kapatıldı //
 8000260:	4b03      	ldr	r3, [pc, #12]	; (8000270 <turn_name_off+0x14>)
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
	delaytime2();
 8000266:	f000 f835 	bl	80002d4 <delaytime2>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40020c14 	.word	0x40020c14

08000274 <turn_surname_on>:
void turn_surname_on(){
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	gpiodOdr|=gpiodp13onmask; // Turuncu açıldı //
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <turn_surname_on+0x18>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a03      	ldr	r2, [pc, #12]	; (800028c <turn_surname_on+0x18>)
 800027e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000282:	6013      	str	r3, [r2, #0]
	delaytime1();
 8000284:	f000 f812 	bl	80002ac <delaytime1>
}
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}
 800028c:	40020c14 	.word	0x40020c14

08000290 <turn_surname_off>:
void turn_surname_off(){
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	gpiodOdr&=gpiodp13ofmask; // Turuncu kapatıldı //
 8000294:	4b04      	ldr	r3, [pc, #16]	; (80002a8 <turn_surname_off+0x18>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a03      	ldr	r2, [pc, #12]	; (80002a8 <turn_surname_off+0x18>)
 800029a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800029e:	6013      	str	r3, [r2, #0]
	 delaytime2();
 80002a0:	f000 f818 	bl	80002d4 <delaytime2>
}
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	40020c14 	.word	0x40020c14

080002ac <delaytime1>:
void delaytime1(){
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0

for(int i=0;i<0x0FFFFFFF;i++){
 80002b2:	2300      	movs	r3, #0
 80002b4:	607b      	str	r3, [r7, #4]
 80002b6:	e002      	b.n	80002be <delaytime1+0x12>
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	3301      	adds	r3, #1
 80002bc:	607b      	str	r3, [r7, #4]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80002c4:	4293      	cmp	r3, r2
 80002c6:	dbf7      	blt.n	80002b8 <delaytime1+0xc>

}
}
 80002c8:	bf00      	nop
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr

080002d4 <delaytime2>:
void delaytime2(){
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
for(int i=0;i<0X0FFFFFFF;i++){
 80002da:	2300      	movs	r3, #0
 80002dc:	607b      	str	r3, [r7, #4]
 80002de:	e002      	b.n	80002e6 <delaytime2+0x12>
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	3301      	adds	r3, #1
 80002e4:	607b      	str	r3, [r7, #4]
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80002ec:	4293      	cmp	r3, r2
 80002ee:	dbf7      	blt.n	80002e0 <delaytime2+0xc>

}
}
 80002f0:	bf00      	nop
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr

080002fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000300:	e7fe      	b.n	8000300 <NMI_Handler+0x4>

08000302 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000302:	b480      	push	{r7}
 8000304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000306:	e7fe      	b.n	8000306 <HardFault_Handler+0x4>

08000308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800030c:	e7fe      	b.n	800030c <MemManage_Handler+0x4>

0800030e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800030e:	b480      	push	{r7}
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000312:	e7fe      	b.n	8000312 <BusFault_Handler+0x4>

08000314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000318:	e7fe      	b.n	8000318 <UsageFault_Handler+0x4>

0800031a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800031a:	b480      	push	{r7}
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800031e:	bf00      	nop
 8000320:	46bd      	mov	sp, r7
 8000322:	bc80      	pop	{r7}
 8000324:	4770      	bx	lr

08000326 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000326:	b480      	push	{r7}
 8000328:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800032a:	bf00      	nop
 800032c:	46bd      	mov	sp, r7
 800032e:	bc80      	pop	{r7}
 8000330:	4770      	bx	lr

08000332 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000332:	b480      	push	{r7}
 8000334:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000336:	bf00      	nop
 8000338:	46bd      	mov	sp, r7
 800033a:	bc80      	pop	{r7}
 800033c:	4770      	bx	lr

0800033e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800033e:	b580      	push	{r7, lr}
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000342:	f000 f833 	bl	80003ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}

0800034a <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800034a:	b480      	push	{r7}
 800034c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800034e:	bf00      	nop
 8000350:	46bd      	mov	sp, r7
 8000352:	bc80      	pop	{r7}
 8000354:	4770      	bx	lr
	...

08000358 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000358:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000390 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800035c:	480d      	ldr	r0, [pc, #52]	; (8000394 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800035e:	490e      	ldr	r1, [pc, #56]	; (8000398 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000360:	4a0e      	ldr	r2, [pc, #56]	; (800039c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000364:	e002      	b.n	800036c <LoopCopyDataInit>

08000366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036a:	3304      	adds	r3, #4

0800036c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800036c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000370:	d3f9      	bcc.n	8000366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000372:	4a0b      	ldr	r2, [pc, #44]	; (80003a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000374:	4c0b      	ldr	r4, [pc, #44]	; (80003a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000378:	e001      	b.n	800037e <LoopFillZerobss>

0800037a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800037c:	3204      	adds	r2, #4

0800037e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000380:	d3fb      	bcc.n	800037a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000382:	f7ff ffe2 	bl	800034a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000386:	f000 f823 	bl	80003d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800038a:	f7ff ff1d 	bl	80001c8 <main>
  bx  lr    
 800038e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000390:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000398:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800039c:	08000438 	.word	0x08000438
  ldr r2, =_sbss
 80003a0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003a4:	20000024 	.word	0x20000024

080003a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003a8:	e7fe      	b.n	80003a8 <ADC_IRQHandler>
	...

080003ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <HAL_IncTick+0x1c>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	461a      	mov	r2, r3
 80003b6:	4b05      	ldr	r3, [pc, #20]	; (80003cc <HAL_IncTick+0x20>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4413      	add	r3, r2
 80003bc:	4a03      	ldr	r2, [pc, #12]	; (80003cc <HAL_IncTick+0x20>)
 80003be:	6013      	str	r3, [r2, #0]
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr
 80003c8:	20000000 	.word	0x20000000
 80003cc:	20000020 	.word	0x20000020

080003d0 <__libc_init_array>:
 80003d0:	b570      	push	{r4, r5, r6, lr}
 80003d2:	4d0d      	ldr	r5, [pc, #52]	; (8000408 <__libc_init_array+0x38>)
 80003d4:	4c0d      	ldr	r4, [pc, #52]	; (800040c <__libc_init_array+0x3c>)
 80003d6:	1b64      	subs	r4, r4, r5
 80003d8:	10a4      	asrs	r4, r4, #2
 80003da:	2600      	movs	r6, #0
 80003dc:	42a6      	cmp	r6, r4
 80003de:	d109      	bne.n	80003f4 <__libc_init_array+0x24>
 80003e0:	4d0b      	ldr	r5, [pc, #44]	; (8000410 <__libc_init_array+0x40>)
 80003e2:	4c0c      	ldr	r4, [pc, #48]	; (8000414 <__libc_init_array+0x44>)
 80003e4:	f000 f818 	bl	8000418 <_init>
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	10a4      	asrs	r4, r4, #2
 80003ec:	2600      	movs	r6, #0
 80003ee:	42a6      	cmp	r6, r4
 80003f0:	d105      	bne.n	80003fe <__libc_init_array+0x2e>
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f8:	4798      	blx	r3
 80003fa:	3601      	adds	r6, #1
 80003fc:	e7ee      	b.n	80003dc <__libc_init_array+0xc>
 80003fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000402:	4798      	blx	r3
 8000404:	3601      	adds	r6, #1
 8000406:	e7f2      	b.n	80003ee <__libc_init_array+0x1e>
 8000408:	08000430 	.word	0x08000430
 800040c:	08000430 	.word	0x08000430
 8000410:	08000430 	.word	0x08000430
 8000414:	08000434 	.word	0x08000434

08000418 <_init>:
 8000418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041a:	bf00      	nop
 800041c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041e:	bc08      	pop	{r3}
 8000420:	469e      	mov	lr, r3
 8000422:	4770      	bx	lr

08000424 <_fini>:
 8000424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000426:	bf00      	nop
 8000428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042a:	bc08      	pop	{r3}
 800042c:	469e      	mov	lr, r3
 800042e:	4770      	bx	lr
